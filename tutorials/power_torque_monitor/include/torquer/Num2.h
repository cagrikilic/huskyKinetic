// Generated by gencpp from file torquer/Num2.msg
// DO NOT EDIT!


#ifndef TORQUER_MESSAGE_NUM2_H
#define TORQUER_MESSAGE_NUM2_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace torquer
{
template <class ContainerAllocator>
struct Num2_
{
  typedef Num2_<ContainerAllocator> Type;

  Num2_()
    : left_driver_power(0.0)
    , right_driver_power(0.0)
    , left_driver_torque(0.0)
    , right_driver_torque(0.0)  {
    }
  Num2_(const ContainerAllocator& _alloc)
    : left_driver_power(0.0)
    , right_driver_power(0.0)
    , left_driver_torque(0.0)
    , right_driver_torque(0.0)  {
  (void)_alloc;
    }



   typedef double _left_driver_power_type;
  _left_driver_power_type left_driver_power;

   typedef double _right_driver_power_type;
  _right_driver_power_type right_driver_power;

   typedef double _left_driver_torque_type;
  _left_driver_torque_type left_driver_torque;

   typedef double _right_driver_torque_type;
  _right_driver_torque_type right_driver_torque;





  typedef boost::shared_ptr< ::torquer::Num2_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::torquer::Num2_<ContainerAllocator> const> ConstPtr;

}; // struct Num2_

typedef ::torquer::Num2_<std::allocator<void> > Num2;

typedef boost::shared_ptr< ::torquer::Num2 > Num2Ptr;
typedef boost::shared_ptr< ::torquer::Num2 const> Num2ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::torquer::Num2_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::torquer::Num2_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace torquer

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'torquer': ['/home/cagri/catkin_ws/src/torquer/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::torquer::Num2_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::torquer::Num2_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::torquer::Num2_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::torquer::Num2_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::torquer::Num2_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::torquer::Num2_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::torquer::Num2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7a327322b9908768e15747a267093259";
  }

  static const char* value(const ::torquer::Num2_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7a327322b9908768ULL;
  static const uint64_t static_value2 = 0xe15747a267093259ULL;
};

template<class ContainerAllocator>
struct DataType< ::torquer::Num2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "torquer/Num2";
  }

  static const char* value(const ::torquer::Num2_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::torquer::Num2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 left_driver_power\n\
float64 right_driver_power\n\
float64 left_driver_torque\n\
float64 right_driver_torque\n\
";
  }

  static const char* value(const ::torquer::Num2_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::torquer::Num2_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.left_driver_power);
      stream.next(m.right_driver_power);
      stream.next(m.left_driver_torque);
      stream.next(m.right_driver_torque);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Num2_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::torquer::Num2_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::torquer::Num2_<ContainerAllocator>& v)
  {
    s << indent << "left_driver_power: ";
    Printer<double>::stream(s, indent + "  ", v.left_driver_power);
    s << indent << "right_driver_power: ";
    Printer<double>::stream(s, indent + "  ", v.right_driver_power);
    s << indent << "left_driver_torque: ";
    Printer<double>::stream(s, indent + "  ", v.left_driver_torque);
    s << indent << "right_driver_torque: ";
    Printer<double>::stream(s, indent + "  ", v.right_driver_torque);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TORQUER_MESSAGE_NUM2_H
